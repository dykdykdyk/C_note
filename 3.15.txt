
指针：形参数组名可以不指定大小，因为形参数组名实际上是个指针变量
如果用指针变量作实参，必须先使指针变量有确定值，指向一个已定义的对象。

p =&a[0];//p的值是a[0]的地址
p =a;    //p的值是数组a首元素(即a[0]的地址)


这一节，有时候多看几遍，有点不好理解。
通过指针引用多维数组
  对于二维数组：*(a[i]+j)或 *(*(a+i)+j)是a[i][j]的值
	(a+i)+j 表示的是i行j列的元素地址
  a+1是二维数组a中序号为1的行的首地址(序号从0起算),而*(a+1)并不是a+1
单元的内容(值)，因为a+1并不是一个变量的存储单元,一万九谈不上他的内容了.
"1"代表一行中全部元素所占的字节数(如4个元素的整型数据4*4=16个字节).
   a,a+1是指向行的指针，在他前面加一个*，就是*a和*(a+1)就指向列的指针，分别指向a
数组中的0行0列的元素和1行0列的元素，如在指向列的指针前面加&，就成为了指向行的指针.
 指向二位数组的指针变量求某一特定的元素的值:
 		i*m+j;  (二位数组大小为n*m),地址为&a[0][0]+(i*m+j)或"p+(i*m+j)"，值
为*(p+(i*m+j))

  int (*p)[4];//定义指向一维整型数组的指针变量，一维数组有4个元素，
因此p的基类型是一维数组，其长度是16字节。
	
	*(p+2)+3  = &score[2][3]; //2是以p的基类型(一维整型数组)的长苏为单位的,即p每加1
，地址就增加16个字节  括号外的3，不是以p的基类型的长度为单位的，*（p+2)得到
a[2],即&a[2][0],它已经转化为指向列元素的指针了,因此加3是以元素的长度为单位的，即
加(3*4)个字节
  形参和实参如果是指针类型，应当注意他们的类型必须一致


通过指针引用字符串
    1.字符串的引用方式
	char *string="I Love China!";
    等价于  
 	char *string;//定义一个char型变量
	string="I love China!";//把字符串第1个元素的地址赋给字符串指针变量string
      printf("string b is:%s\n",b);//可以把字符串数组b里面所有的元素都输出出来
    2.字符指针做函数参数
	字符'\0'的ASCII代码为0,while(*from!='\0')等价于while(*from!=0)，而关系
表达式*from!=0可以简化为(*from)，因为(*from)的值不等于0,则表达式"*from"为真,同时
(*from!=0)为真    等价于while(*to++=* from++)   里面的表达式的值为0为假了 
      指针变量的值是可以改变的，而数组名代表一个固定的值(数组首元素的地址)，不能改变。

    字符指针变量指向的字符串常量中的内容是不可以被取代的(不能对他们再赋值)
如： char *b="House";//指向字符串常量中的第一个字符
	b[2]='r';//非法，字符串常量不能改变
	可以用字符串指针变量带下标的形式引用所指的字符串中的字符.
	用指针变量指向一个格式字符串，可以用呀来代替printf函数中的格式字符串。
	char *format;
	format="a=%d,b=%f\n";   printf(format,a,b);

8.5 指向函数的指针
    如果在程序中定义了一个函数，在编译的施工员，编译系统为函数代码分配了一段存储
空间，这段存储空间的起始地址(又称入口地址)称为这个函数的指针。
	int(*p)(int,int);定义p是一个指向函数的指针变量，他可以指向函数的类型
为整型且有两个整型参数的函数.p的类型用int(*p)(int,int)表示。
   2.用函数指针变量调用函数 
   定义和使用指向函数的指针变量
       类型名(*指针变量名)(函数参数表列)
       int(*p)(int,int);//类型名是指函数返回值的类型
   3.用函数的指针作函数参数
       指向函数的指针可以作为函数参数，把函数的入口地址传递给形参，

8.6返回指针值的函数
  1.类型名 *函数名(参数列表) 例：int *a(int x,int y);
       
8.7 指针数组和多重指针
     指针数组：一个数组，若其元素均为指针类型数据，称为指针数组。
	类型名 *数组名[数组长度]；
     指向指针数据的指针
	char **p;















